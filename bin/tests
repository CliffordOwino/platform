#!/usr/bin/env php
<?php

require __DIR__ . '/../vendor/autoload.php';

use Symfony\Component\Console\Application;
use Symfony\Component\Console\Command\Command;

use Symfony\Component\Console\Input\InputArgument;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Input\InputOption;
use Symfony\Component\Console\Output\OutputInterface;
use Symfony\Component\Console\Formatter\OutputFormatterStyle;

class UshahidiTestsCommand extends Command
{
    protected $dir;

    private $test_server_pid;
    private $test_database_sql_url = 'https://72c9192a7b87de5fc63a-f9fe2e6be12470a7bff22b7693bc7329.ssl.cf1.rackcdn.com/lamu-ci-zombie2x.sql';

    private $env_variables = [
        'KOHANA_ENV' => 'testing',
    ];

    public function __construct()
    {
        parent::__construct();
        $this->dir = realpath(__DIR__ . '/../');
        chdir($this->dir);
    }

    protected function install()
    {
        // change permissions
        `chmod 0777 {$this->dir}/application/cache application/logs`;

        // move the behat config into place
        `cp {$this->dir}/application/tests/behat.template application/tests/behat.yml`;

        // configure mysql, set up testing databases
        echo "Configuring databases\n";
        $this->mysql_command('SET GLOBAL sql_mode = "STRICT_ALL_TABLES"');
        $this->mysql_command('DROP DATABASE IF EXISTS platform_test');
        $this->mysql_command('CREATE DATABASE platform_test');
        $this->mysql_command('DROP DATABASE IF EXISTS zombie2x');
        $this->mysql_command('CREATE DATABASE zombie2x');
        $this->exec_env("{$this->dir}/bin/phinx migrate -c {$this->dir}/application/phinx.php");

        // if zombie2x.sql does not exist, download it
        $zombie_sql_file = '/tmp/ushahidi-zombie2x.sql';
        if (!file_exists($zombie_sql_file))
        {
            echo "Downloading test data...\n";
            `curl $test_database_sql_url > $zombie_sql_file`;
        }

        // import the zombies
        echo "\nImporting test data\n";
        $this->exec_env("mysql -u root zombie2x < $zombie_sql_file");
    }

    protected function test_server($state)
    {
        if ($state === 'up' && !$this->test_server_pid)
        {
            $command = "php -S localhost:8000 -t {$this->dir}"
                     . " {$this->dir}/httpdocs/index.php"
                     . " > /dev/null 2>&1 & echo $!;"
                     ;

            $this->test_server_pid = $this->exec_env($command);
            echo "PHP server started ({$this->test_server_pid})\n";
            sleep(3);
        }
        else if ($state === 'down' && $this->test_server_pid)
        {
            echo "\nKilling PHP Server ({$this->test_server_pid})\n";
            `kill {$this->test_server_pid}`;
            $this->test_server_pid = null;
        }
    }

    protected function exec_env($command, $return_exit_code = false)
    {
        foreach ($this->env_variables as $name => $value)
        {
            putenv("$name=$value");
        }

        if ($return_exit_code)
        {
            passthru($command, $exit_code);
            return $exit_code;
        }
        else
        {
            return exec($command);
        }
    }

    protected function mysql_command($command)
    {
        `mysql -u root -e "$command";`;
    }

    protected function add_formatting(OutputInterface $output)
    {
        $style_pass = new OutputFormatterStyle('white', 'green', array('bold'));
        $style_fail = new OutputFormatterStyle('white', 'red', array('bold'));
        $style_info = new OutputFormatterStyle('white', 'cyan', array('bold'));
        $output->getFormatter()->setStyle('pass', $style_pass);
        $output->getFormatter()->setStyle('fail', $style_fail);
        $output->getFormatter()->setStyle('info', $style_info);
    }
}

class UshahidiTestsRunCommand extends UshahidiTestsCommand
{
    protected function configure()
    {
        $this
            ->setName('run')
            ->setDescription('Runs all the tests and returns a single pass/fail result & exit code (default command)')
            ->addOption(
                'no-install',
                null,
                InputOption::VALUE_NONE,
                'Don\'t install the prerequisites'
            )
            ;
    }

    protected function execute(InputInterface $input, OutputInterface $output)
    {
        $this->add_formatting($output);

        $no_install = $input->getOption('no-install');
        if (!$no_install) { $this->install(); }

        // start the local test server
        $this->test_server('up');

        // we're optimistic
        $tests_pass = true;

        // run phpspec
        $output->writeln("\n<info> - Running Phpspec tests - </info>\n");
        $phpspec_command = "{$this->dir}/bin/phpspec run --format dot --verbose";
        $tests_pass = $tests_pass && ($this->exec_env($phpspec_command, true) === 0);

        // run behat
        $output->writeln("\n<info> - Running Behat tests - </info>\n");
        $behat_command = "{$this->dir}/bin/behat"
                       . " --config {$this->dir}/application/tests/behat.yml"
                       . " --format progress"
                       ;
        $tests_pass = $tests_pass && ($this->exec_env($behat_command, true) === 0);

        // run phpunit
        $output->writeln("\n<info> - Running PHPUnit tests - </info>\n");
        $phpunit_command = "{$this->dir}/bin/phpunit"
                         . " -c {$this->dir}/application/tests/phpunit.xml"
                         ;
        $tests_pass = $tests_pass && ($this->exec_env($phpunit_command, true) === 0);

        // bring down the test server
        $this->test_server('down');

        // output a single pass/fail message
        echo "\n";
        if ($tests_pass)
        {
            $output->writeln("<pass> All tests ran successfully! </pass>\n");
        }
        else
        {
            $output->writeln("<fail> Some tests failed! </fail>\n");
        }

        // return a single exit code from the tests above
        exit($tests_pass ? 0 : 1);
    }
}

class UshahidiTestsInstallCommand extends UshahidiTestsCommand
{
    protected function configure()
    {
        $this
            ->setName('install')
            ->setDescription('Install necessary prerequisites for running tests')
            ;
    }

    protected function execute(InputInterface $input, OutputInterface $output)
    {
        $this->install();
    }
}

$test_runner = new Application();
$test_runner->add(new UshahidiTestsRunCommand);
$test_runner->add(new UshahidiTestsInstallCommand);
$test_runner->setDefaultCommand('run');
$test_runner->run();
