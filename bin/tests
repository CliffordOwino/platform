#!/usr/bin/env ruby

require 'rubygems'
require 'commander'
require 'rainbow'

class UshahidiTestRunner
  include Commander::Methods

  @@bin_dir = nil
  @@base_dir = nil
  @@test_server_pid = nil

  @@env_variables = { 'KOHANA_ENV' => 'testing' }

  def run
    @@bin_dir = File.expand_path File.dirname(__FILE__)
    @@base_dir = File.expand_path "#{@@bin_dir}/../"
    Dir.chdir(@@base_dir)

    program :name, 'Ushahidi Test Runner'
    program :description, 'CLI script for running Ushahidi Platform tests'
    program :version, '0.0.1'

    default_command :run

    command :run do |c|
      c.syntax = './tests run'
      c.summary = 'Run the tests (default command)'
      c.description = 'Runs all the tests and returns a single pass/fail result & exit code'

      c.option '--[no-]install', 'Optionally install prerequisites'
      c.example 'Don\'t install the prerequisites', 'tests run --no-install'

      c.action do |args, options|

        # run the installer by default
        options.default \
          :install => true

        if options.install
          self.install
        end

        # start the local test server
        self.test_server :up

        # we're optimistic
        tests_pass = true

        # run phpspec
        tests_pass = tests_pass && self.system_with_env(
          "#{@@bin_dir}/phpspec run --format dot --verbose"
        )

        # run behat
        tests_pass = tests_pass && self.system_with_env(
          "#{@@bin_dir}/behat"\
          " --config #{@@base_dir}/application/tests/behat.yml "\
          " --format progress"
        )

        # run phpunit
        tests_pass = tests_pass && self.system_with_env(
          "#{@@bin_dir}/phpunit"\
          " -c #{@@base_dir}/application/tests/phpunit.xml"
        )

        # output a single pass/fail message
        puts "\n"
        if tests_pass
          puts Rainbow('All tests ran successfully!').fg(:white).bg(39, 145, 61).bright
        else
          puts Rainbow('Some tests failed!').fg(:white).bg(138, 31, 3).bright
        end
        puts "\n"

        # bring down the test server
        self.test_server :down

        # return a single exit code from the tests above
        exit (tests_pass ? 0 : 1)
      end
    end

    command :install do |c|
      c.syntax = './tests install'
      c.summary = 'Install test prerequisites'
      c.description = 'Install necessary prerequisites for running tests'

      c.action do |args, options|
        self.install
      end
    end

    run!
  end

  def install
    # change permissions
    `chmod 0777 #{@@base_dir}/application/cache application/logs`

    # move the behat config into place
    `cp #{@@base_dir}/application/tests/behat.template application/tests/behat.yml`

    # configure mysql, set up testing databases
    self.mysql_command 'SET GLOBAL sql_mode = "STRICT_ALL_TABLES"'
    self.mysql_command 'DROP DATABASE IF EXISTS platform_test'
    self.mysql_command 'CREATE DATABASE platform_test'
    self.mysql_command 'DROP DATABASE IF EXISTS zombie2x'
    self.mysql_command 'CREATE DATABASE zombie2x'
    self.system_with_env "#{@@bin_dir}/phinx migrate -c #{@@base_dir}/application/phinx.php"

    # if zombie2x.sql does not exist, download it
    zombie_sql_file = '/tmp/ushahidi-zombie2x.sql'
    if not File.exist?(zombie_sql_file)
      `curl https://72c9192a7b87de5fc63a-f9fe2e6be12470a7bff22b7693bc7329.ssl.cf1.rackcdn.com/lamu-ci-zombie2x.sql > #{zombie_sql_file}`
    end

    # import the zombies
    self.system_with_env "mysql -u root zombie2x < #{zombie_sql_file}"
  end

  def system_with_env *args
    system(@@env_variables, *args)
  end

  def mysql_command cmd
    self.system_with_env "mysql -u root -e \"#{cmd}\";"
  end

  def test_server state
    if state === :up and not @@test_server_pid
      @@test_server_pid = Kernel.spawn(
        @@env_variables,
        "php -S localhost:8000 -t #{@@base_dir} #{@@base_dir}/httpdocs/index.php"
      )
      sleep 3
    elsif state === :down and @@test_server_pid
      `kill #{@@test_server_pid}`
      @@test_server_pid = nil
    end
  end
end

UshahidiTestRunner.new.run if $0 == __FILE__
